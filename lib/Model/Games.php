<?php
/**
 * Games
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Clash Royale API
 *
 * This API description is based on the api provided by http://cr-api.com
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cr-api@manutrix.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Games Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Games implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Games';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total' => 'int',
        'tournament_games' => 'int',
        'wins' => 'int',
        'losses' => 'int',
        'draws' => 'int',
        'current_win_streak' => 'int'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'total' => 'total',
        'tournament_games' => 'tournamentGames',
        'wins' => 'wins',
        'losses' => 'losses',
        'draws' => 'draws',
        'current_win_streak' => 'currentWinStreak'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'total' => 'setTotal',
        'tournament_games' => 'setTournamentGames',
        'wins' => 'setWins',
        'losses' => 'setLosses',
        'draws' => 'setDraws',
        'current_win_streak' => 'setCurrentWinStreak'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'total' => 'getTotal',
        'tournament_games' => 'getTournamentGames',
        'wins' => 'getWins',
        'losses' => 'getLosses',
        'draws' => 'getDraws',
        'current_win_streak' => 'getCurrentWinStreak'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['tournament_games'] = isset($data['tournament_games']) ? $data['tournament_games'] : null;
        $this->container['wins'] = isset($data['wins']) ? $data['wins'] : null;
        $this->container['losses'] = isset($data['losses']) ? $data['losses'] : null;
        $this->container['draws'] = isset($data['draws']) ? $data['draws'] : null;
        $this->container['current_win_streak'] = isset($data['current_win_streak']) ? $data['current_win_streak'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets total
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param int $total
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets tournament_games
     * @return int
     */
    public function getTournamentGames()
    {
        return $this->container['tournament_games'];
    }

    /**
     * Sets tournament_games
     * @param int $tournament_games
     * @return $this
     */
    public function setTournamentGames($tournament_games)
    {
        $this->container['tournament_games'] = $tournament_games;

        return $this;
    }

    /**
     * Gets wins
     * @return int
     */
    public function getWins()
    {
        return $this->container['wins'];
    }

    /**
     * Sets wins
     * @param int $wins
     * @return $this
     */
    public function setWins($wins)
    {
        $this->container['wins'] = $wins;

        return $this;
    }

    /**
     * Gets losses
     * @return int
     */
    public function getLosses()
    {
        return $this->container['losses'];
    }

    /**
     * Sets losses
     * @param int $losses
     * @return $this
     */
    public function setLosses($losses)
    {
        $this->container['losses'] = $losses;

        return $this;
    }

    /**
     * Gets draws
     * @return int
     */
    public function getDraws()
    {
        return $this->container['draws'];
    }

    /**
     * Sets draws
     * @param int $draws
     * @return $this
     */
    public function setDraws($draws)
    {
        $this->container['draws'] = $draws;

        return $this;
    }

    /**
     * Gets current_win_streak
     * @return int
     */
    public function getCurrentWinStreak()
    {
        return $this->container['current_win_streak'];
    }

    /**
     * Sets current_win_streak
     * @param int $current_win_streak
     * @return $this
     */
    public function setCurrentWinStreak($current_win_streak)
    {
        $this->container['current_win_streak'] = $current_win_streak;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
