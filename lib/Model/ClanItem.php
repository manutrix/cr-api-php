<?php
/**
 * ClanItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Clash Royale API
 *
 * This API description is based on the api provided by http://cr-api.com
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cr-api@manutrix.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ClanItem Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ClanItem implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ClanItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tag' => 'string',
        'name' => 'string',
        'badge' => '\Swagger\Client\Model\Badge',
        'type' => 'int',
        'member_count' => 'int',
        'score' => 'int',
        'required_score' => 'int',
        'donations' => 'int',
        'current_rank' => 'int',
        'description' => 'string',
        'type_name' => 'string',
        'region' => '\Swagger\Client\Model\Region',
        'clan_chest' => '\Swagger\Client\Model\ClanChest',
        'members' => '\Swagger\Client\Model\Member[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'tag' => 'tag',
        'name' => 'name',
        'badge' => 'badge',
        'type' => 'type',
        'member_count' => 'memberCount',
        'score' => 'score',
        'required_score' => 'requiredScore',
        'donations' => 'donations',
        'current_rank' => 'currentRank',
        'description' => 'description',
        'type_name' => 'typeName',
        'region' => 'region',
        'clan_chest' => 'clanChest',
        'members' => 'members'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'tag' => 'setTag',
        'name' => 'setName',
        'badge' => 'setBadge',
        'type' => 'setType',
        'member_count' => 'setMemberCount',
        'score' => 'setScore',
        'required_score' => 'setRequiredScore',
        'donations' => 'setDonations',
        'current_rank' => 'setCurrentRank',
        'description' => 'setDescription',
        'type_name' => 'setTypeName',
        'region' => 'setRegion',
        'clan_chest' => 'setClanChest',
        'members' => 'setMembers'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'tag' => 'getTag',
        'name' => 'getName',
        'badge' => 'getBadge',
        'type' => 'getType',
        'member_count' => 'getMemberCount',
        'score' => 'getScore',
        'required_score' => 'getRequiredScore',
        'donations' => 'getDonations',
        'current_rank' => 'getCurrentRank',
        'description' => 'getDescription',
        'type_name' => 'getTypeName',
        'region' => 'getRegion',
        'clan_chest' => 'getClanChest',
        'members' => 'getMembers'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['badge'] = isset($data['badge']) ? $data['badge'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['member_count'] = isset($data['member_count']) ? $data['member_count'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['required_score'] = isset($data['required_score']) ? $data['required_score'] : null;
        $this->container['donations'] = isset($data['donations']) ? $data['donations'] : null;
        $this->container['current_rank'] = isset($data['current_rank']) ? $data['current_rank'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['type_name'] = isset($data['type_name']) ? $data['type_name'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['clan_chest'] = isset($data['clan_chest']) ? $data['clan_chest'] : null;
        $this->container['members'] = isset($data['members']) ? $data['members'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets tag
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param string $tag
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets badge
     * @return \Swagger\Client\Model\Badge
     */
    public function getBadge()
    {
        return $this->container['badge'];
    }

    /**
     * Sets badge
     * @param \Swagger\Client\Model\Badge $badge
     * @return $this
     */
    public function setBadge($badge)
    {
        $this->container['badge'] = $badge;

        return $this;
    }

    /**
     * Gets type
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param int $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets member_count
     * @return int
     */
    public function getMemberCount()
    {
        return $this->container['member_count'];
    }

    /**
     * Sets member_count
     * @param int $member_count
     * @return $this
     */
    public function setMemberCount($member_count)
    {
        $this->container['member_count'] = $member_count;

        return $this;
    }

    /**
     * Gets score
     * @return int
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     * @param int $score
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets required_score
     * @return int
     */
    public function getRequiredScore()
    {
        return $this->container['required_score'];
    }

    /**
     * Sets required_score
     * @param int $required_score
     * @return $this
     */
    public function setRequiredScore($required_score)
    {
        $this->container['required_score'] = $required_score;

        return $this;
    }

    /**
     * Gets donations
     * @return int
     */
    public function getDonations()
    {
        return $this->container['donations'];
    }

    /**
     * Sets donations
     * @param int $donations
     * @return $this
     */
    public function setDonations($donations)
    {
        $this->container['donations'] = $donations;

        return $this;
    }

    /**
     * Gets current_rank
     * @return int
     */
    public function getCurrentRank()
    {
        return $this->container['current_rank'];
    }

    /**
     * Sets current_rank
     * @param int $current_rank
     * @return $this
     */
    public function setCurrentRank($current_rank)
    {
        $this->container['current_rank'] = $current_rank;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type_name
     * @return string
     */
    public function getTypeName()
    {
        return $this->container['type_name'];
    }

    /**
     * Sets type_name
     * @param string $type_name
     * @return $this
     */
    public function setTypeName($type_name)
    {
        $this->container['type_name'] = $type_name;

        return $this;
    }

    /**
     * Gets region
     * @return \Swagger\Client\Model\Region
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     * @param \Swagger\Client\Model\Region $region
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets clan_chest
     * @return \Swagger\Client\Model\ClanChest
     */
    public function getClanChest()
    {
        return $this->container['clan_chest'];
    }

    /**
     * Sets clan_chest
     * @param \Swagger\Client\Model\ClanChest $clan_chest
     * @return $this
     */
    public function setClanChest($clan_chest)
    {
        $this->container['clan_chest'] = $clan_chest;

        return $this;
    }

    /**
     * Gets members
     * @return \Swagger\Client\Model\Member[]
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     * @param \Swagger\Client\Model\Member[] $members
     * @return $this
     */
    public function setMembers($members)
    {
        $this->container['members'] = $members;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
