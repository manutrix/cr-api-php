<?php
/**
 * ProfileItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Clash Royale API
 *
 * This API description is based on the api provided by http://cr-api.com
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cr-api@manutrix.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ProfileItem Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProfileItem implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProfileItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tag' => 'string',
        'name' => 'string',
        'trophies' => 'int',
        'legendary_trophies' => 'int',
        'global_rank' => 'int',
        'name_changed' => 'bool',
        'arena' => '\Swagger\Client\Model\Arena',
        'clan' => '\Swagger\Client\Model\Clan',
        'experience' => '\Swagger\Client\Model\Experience',
        'stats' => '\Swagger\Client\Model\Stats',
        'games' => '\Swagger\Client\Model\Games',
        'chest_cycle' => '\Swagger\Client\Model\ChestCycle',
        'shop_offers' => '\Swagger\Client\Model\ShopOffers',
        'current_deck' => '\Swagger\Client\Model\Card[]',
        'previous_seasons' => '\Swagger\Client\Model\Season[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'tag' => 'tag',
        'name' => 'name',
        'trophies' => 'trophies',
        'legendary_trophies' => 'legendaryTrophies',
        'global_rank' => 'globalRank',
        'name_changed' => 'nameChanged',
        'arena' => 'arena',
        'clan' => 'clan',
        'experience' => 'experience',
        'stats' => 'stats',
        'games' => 'games',
        'chest_cycle' => 'chestCycle',
        'shop_offers' => 'shopOffers',
        'current_deck' => 'currentDeck',
        'previous_seasons' => 'previousSeasons'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'tag' => 'setTag',
        'name' => 'setName',
        'trophies' => 'setTrophies',
        'legendary_trophies' => 'setLegendaryTrophies',
        'global_rank' => 'setGlobalRank',
        'name_changed' => 'setNameChanged',
        'arena' => 'setArena',
        'clan' => 'setClan',
        'experience' => 'setExperience',
        'stats' => 'setStats',
        'games' => 'setGames',
        'chest_cycle' => 'setChestCycle',
        'shop_offers' => 'setShopOffers',
        'current_deck' => 'setCurrentDeck',
        'previous_seasons' => 'setPreviousSeasons'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'tag' => 'getTag',
        'name' => 'getName',
        'trophies' => 'getTrophies',
        'legendary_trophies' => 'getLegendaryTrophies',
        'global_rank' => 'getGlobalRank',
        'name_changed' => 'getNameChanged',
        'arena' => 'getArena',
        'clan' => 'getClan',
        'experience' => 'getExperience',
        'stats' => 'getStats',
        'games' => 'getGames',
        'chest_cycle' => 'getChestCycle',
        'shop_offers' => 'getShopOffers',
        'current_deck' => 'getCurrentDeck',
        'previous_seasons' => 'getPreviousSeasons'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['trophies'] = isset($data['trophies']) ? $data['trophies'] : null;
        $this->container['legendary_trophies'] = isset($data['legendary_trophies']) ? $data['legendary_trophies'] : null;
        $this->container['global_rank'] = isset($data['global_rank']) ? $data['global_rank'] : null;
        $this->container['name_changed'] = isset($data['name_changed']) ? $data['name_changed'] : null;
        $this->container['arena'] = isset($data['arena']) ? $data['arena'] : null;
        $this->container['clan'] = isset($data['clan']) ? $data['clan'] : null;
        $this->container['experience'] = isset($data['experience']) ? $data['experience'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['games'] = isset($data['games']) ? $data['games'] : null;
        $this->container['chest_cycle'] = isset($data['chest_cycle']) ? $data['chest_cycle'] : null;
        $this->container['shop_offers'] = isset($data['shop_offers']) ? $data['shop_offers'] : null;
        $this->container['current_deck'] = isset($data['current_deck']) ? $data['current_deck'] : null;
        $this->container['previous_seasons'] = isset($data['previous_seasons']) ? $data['previous_seasons'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets tag
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param string $tag
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets trophies
     * @return int
     */
    public function getTrophies()
    {
        return $this->container['trophies'];
    }

    /**
     * Sets trophies
     * @param int $trophies
     * @return $this
     */
    public function setTrophies($trophies)
    {
        $this->container['trophies'] = $trophies;

        return $this;
    }

    /**
     * Gets legendary_trophies
     * @return int
     */
    public function getLegendaryTrophies()
    {
        return $this->container['legendary_trophies'];
    }

    /**
     * Sets legendary_trophies
     * @param int $legendary_trophies
     * @return $this
     */
    public function setLegendaryTrophies($legendary_trophies)
    {
        $this->container['legendary_trophies'] = $legendary_trophies;

        return $this;
    }

    /**
     * Gets global_rank
     * @return int
     */
    public function getGlobalRank()
    {
        return $this->container['global_rank'];
    }

    /**
     * Sets global_rank
     * @param int $global_rank
     * @return $this
     */
    public function setGlobalRank($global_rank)
    {
        $this->container['global_rank'] = $global_rank;

        return $this;
    }

    /**
     * Gets name_changed
     * @return bool
     */
    public function getNameChanged()
    {
        return $this->container['name_changed'];
    }

    /**
     * Sets name_changed
     * @param bool $name_changed
     * @return $this
     */
    public function setNameChanged($name_changed)
    {
        $this->container['name_changed'] = $name_changed;

        return $this;
    }

    /**
     * Gets arena
     * @return \Swagger\Client\Model\Arena
     */
    public function getArena()
    {
        return $this->container['arena'];
    }

    /**
     * Sets arena
     * @param \Swagger\Client\Model\Arena $arena
     * @return $this
     */
    public function setArena($arena)
    {
        $this->container['arena'] = $arena;

        return $this;
    }

    /**
     * Gets clan
     * @return \Swagger\Client\Model\Clan
     */
    public function getClan()
    {
        return $this->container['clan'];
    }

    /**
     * Sets clan
     * @param \Swagger\Client\Model\Clan $clan
     * @return $this
     */
    public function setClan($clan)
    {
        $this->container['clan'] = $clan;

        return $this;
    }

    /**
     * Gets experience
     * @return \Swagger\Client\Model\Experience
     */
    public function getExperience()
    {
        return $this->container['experience'];
    }

    /**
     * Sets experience
     * @param \Swagger\Client\Model\Experience $experience
     * @return $this
     */
    public function setExperience($experience)
    {
        $this->container['experience'] = $experience;

        return $this;
    }

    /**
     * Gets stats
     * @return \Swagger\Client\Model\Stats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     * @param \Swagger\Client\Model\Stats $stats
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets games
     * @return \Swagger\Client\Model\Games
     */
    public function getGames()
    {
        return $this->container['games'];
    }

    /**
     * Sets games
     * @param \Swagger\Client\Model\Games $games
     * @return $this
     */
    public function setGames($games)
    {
        $this->container['games'] = $games;

        return $this;
    }

    /**
     * Gets chest_cycle
     * @return \Swagger\Client\Model\ChestCycle
     */
    public function getChestCycle()
    {
        return $this->container['chest_cycle'];
    }

    /**
     * Sets chest_cycle
     * @param \Swagger\Client\Model\ChestCycle $chest_cycle
     * @return $this
     */
    public function setChestCycle($chest_cycle)
    {
        $this->container['chest_cycle'] = $chest_cycle;

        return $this;
    }

    /**
     * Gets shop_offers
     * @return \Swagger\Client\Model\ShopOffers
     */
    public function getShopOffers()
    {
        return $this->container['shop_offers'];
    }

    /**
     * Sets shop_offers
     * @param \Swagger\Client\Model\ShopOffers $shop_offers
     * @return $this
     */
    public function setShopOffers($shop_offers)
    {
        $this->container['shop_offers'] = $shop_offers;

        return $this;
    }

    /**
     * Gets current_deck
     * @return \Swagger\Client\Model\Card[]
     */
    public function getCurrentDeck()
    {
        return $this->container['current_deck'];
    }

    /**
     * Sets current_deck
     * @param \Swagger\Client\Model\Card[] $current_deck
     * @return $this
     */
    public function setCurrentDeck($current_deck)
    {
        $this->container['current_deck'] = $current_deck;

        return $this;
    }

    /**
     * Gets previous_seasons
     * @return \Swagger\Client\Model\Season[]
     */
    public function getPreviousSeasons()
    {
        return $this->container['previous_seasons'];
    }

    /**
     * Sets previous_seasons
     * @param \Swagger\Client\Model\Season[] $previous_seasons
     * @return $this
     */
    public function setPreviousSeasons($previous_seasons)
    {
        $this->container['previous_seasons'] = $previous_seasons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
